name: hotel-iot-management 
services:
  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    hostname: rabbitmq-host
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672"  # Management UI
      - "1883:1883"  # MQTT (optional)
    volumes:
      # - ./rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=secret
      - RABBITMQ_DEFAULT_VHOST=/
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped


  timescaledb:
    image: timescale/timescaledb-ha:pg17
    container_name: timescaledb
    hostname: timescaledb-host
    ports:
      - "5433:5432"  # Internal PostgreSQL port remains 5432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=sensor_data
    volumes:
      - ./init_timescale.sql:/docker-entrypoint-initdb.d/init.sql  # Auto-execute
    #   - ./timescaledb_data:/var/lib/postgresql/data
    restart: unless-stopped


  # supabase-postgres:
  #   image: supabase/postgres:15.8.1.060
  #   container_name: supabase-postgres
  #   environment:
  #     POSTGRES_DB: supabase
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: secret
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - ./init_supabase.sql:/docker-entrypoint-initdb.d/init.sql:ro
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network


  # supabase-postgres-meta:
  #   image: supabase/postgres-meta:v0.87.1
  #   container_name: supabase-postgres-meta
  #   environment:
  #     PG_META_PORT: 8080
  #     PG_META_DB_HOST: supabase-postgres
  #     PG_META_DB_PORT: 5432
  #     PG_META_DB_NAME: supabase
  #     PG_META_DB_USER: postgres
  #     PG_META_DB_PASSWORD: secret
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - supabase-postgres
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # supabase-auth:
  #   image: supabase/gotrue:v2.170.0
  #   container_name: supabase-auth
  #   environment:
  #     GOTRUE_DB_DRIVER: postgres
  #     DB_NAMESPACE: auth
  #     DB_HOST: supabase-postgres
  #     DB_PORT: 5432
  #     DB_USER: postgres
  #     DB_PASSWORD: secret
  #     DB_NAME: supabase
  #     GOTRUE_JWT_SECRET: your_super_secure_jwt
  #     GOTRUE_SITE_URL: http://localhost:3001
  #     API_EXTERNAL_URL: http://localhost:8000
  #     DATABASE_URL: postgres://postgres:secret@supabase-postgres:5432/supabase
  #   depends_on:
  #     supabase-postgres:
  #       condition: service_healthy
  #   ports:
  #     - "9999:9999"
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # supabase-rest:
  #   image: postgrest/postgrest:v12.2.8
  #   container_name: supabase-rest
  #   environment:
  #     PGRST_DB_URI: postgres://postgres:secret@supabase-postgres:5432/supabase
  #     PGRST_DB_ANON_ROLE: anon
  #     PGRST_JWT_SECRET: your_super_secure_jwt
  #   depends_on:
  #     - supabase-postgres
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # supabase-realtime:
  #   image: supabase/realtime:v2.34.43
  #   container_name: supabase-realtime
  #   environment:
  #     DB_HOST: supabase-postgres
  #     DB_PORT: 5432
  #     DB_USER: postgres
  #     DB_PASSWORD: secret
  #     DB_NAME: supabase
  #     DB_SSL: "false"
  #     JWT_SECRET: your_super_secure_jwt
  #     API_JWT_SECRET: your_super_secure_jwt
  #     PORT: 4000
  #     SECURE_CHANNELS: "false"
  #   ports:
  #     - "4000:4000"
  #   ulimits:
  #     nofile:
  #       soft: 1048576
  #       hard: 1048576
  #   depends_on:
  #     - supabase-postgres
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # supabase-storage:
  #   image: supabase/storage-api:v1.19.3
  #   container_name: supabase-storage
  #   environment:
  #     POSTGREST_URL: http://supabase-rest:3000
  #     ANON_KEY: your_super_secure_jwt
  #     SERVICE_KEY: your_super_secure_jwt
  #     JWT_SECRET: your_super_secure_jwt
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #     - supabase-postgres
  #     - supabase-rest
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # supabase-edge-runtime:
  #   image: supabase/edge-runtime:v1.67.4
  #   container_name: supabase-edge-runtime
  #   environment:
  #     SUPABASE_URL: http://localhost:8000
  #     SUPABASE_ANON_KEY: your_super_secure_jwt
  #     SUPABASE_SERVICE_ROLE_KEY: your_super_secure_jwt
  #     VERIFY_JWT: true
  #   depends_on:
  #     - supabase-auth
  #     - supabase-rest
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # supabase-supavisor:
  #   image: supabase/supavisor:2.4.14
  #   container_name: supabase-supavisor
  #   environment:
  #     SECRET_KEY_BASE: 9f9b6ab5215c34c9d8f2ec8a58ee8de06d59be08c8f0d9df98a2c6b2e779b99f5c874eddb8cf928d79ab4f3e2cc50c8b
  #     DB_HOST: supabase-postgres
  #     DB_PORT: 5432
  #     DB_NAME: supabase
  #     DB_USER: postgres
  #     DB_PASSWORD: secret
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network


  # supabase-kong:
  #   image: kong:2.8.1
  #   container_name: supabase-kong
  #   environment:
  #     KONG_DATABASE: "off"
  #     KONG_DECLARATIVE_CONFIG: /kong.yml
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #   volumes:
  #     - ./kong.yml:/kong.yml
  #   ports:
  #     - "8000:8000"
  #     - "8443:8443"
  #   depends_on:
  #     - supabase-auth
  #     - supabase-rest
  #     - supabase-storage
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # supabase-studio:
  #   image: supabase/studio:20250317-6955350
  #   container_name: supabase-studio
  #   environment:
  #     SUPABASE_ANON_KEY: your_super_secure_jwt
  #     SUPABASE_SERVICE_KEY: your_super_secure_jwt
  #     STUDIO_PG_META_URL: http://supabase-postgres-meta:8080
  #     SUPABASE_API_URL: http://localhost:8000
  #   ports:
  #     - "3001:3000"
  #   depends_on:
  #     - supabase-postgres
  #     - supabase-postgres-meta
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network


  # vector:
  #   image: timberio/vector:0.28.1-alpine
  #   container_name: supabase-vector
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # logflare:
  #   image: supabase/logflare:1.12.0
  #   container_name: supabase-logflare
  #   environment:
  #     LOGFLARE_NODE_HOST: "http://localhost"
  #     DB_USERNAME: postgres
  #     DB_PASSWORD: secret
  #     DB_NAME: supabase
  #   ports:
  #     - "4001:4000"
  #   depends_on:
  #     - supabase-postgres
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

  # imgproxy:
  #   image: darthsim/imgproxy:v3.8.0
  #   container_name: supabase-imgproxy
  #   environment:
  #     IMGPROXY_KEY: ""
  #     IMGPROXY_SALT: ""
  #     IMGPROXY_USE_ETAG: "true"
  #     IMGPROXY_ENABLE_WEBP_DETECTION: "true"
  #   ports:
  #     - "5001:8080"
  #   restart: unless-stopped
  #   networks:
  #     - supabase-network

    
# networks:
#   supabase-network:
#     driver: bridge

  setup-rabbitmq:
    container_name: setup-rabbitmq
    build:
      context: ..
    command: python setup_rabbitmq.py
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: "no"  # âœ… Do NOT restart on exit

  sensors-publisher:
    container_name: sensors-publisher
    build:
      context: ..
    command: python sensors_publisher.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  sensors-subscriber:
    container_name: sensors-subscriber
    build:
      context: ..
    command: python sensors_subscriber.py
    depends_on:
      - sensors-publisher

  fault-detection:
    container_name: fault-detection
    build:
      context: ..
    command: python fault_detection_agent.py
    depends_on:
      - sensors-subscriber

  occupancy-detection:
    container_name: occupancy-detection
    build:
      context: ..
    command: python occupancy_detection_agent.py
    depends_on:
      - sensors-subscriber

  supabase-updater:
    container_name: supabase-updater
    build:
      context: ..
    command: python supabase_updater_agent.py
    depends_on:
      - fault-detection
      - occupancy-detection

  hotel-dashboard:
    container_name: hotel-dashboard
    build:
      context: ../hotel-iot-dashboard
    ports:
      - "3000:80"
    depends_on:
      - supabase-updater
